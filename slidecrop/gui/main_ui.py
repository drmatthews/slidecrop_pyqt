# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'slidecrop\resources\main.ui'
#
# Created by: PyQt5 UI code generator 5.12.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(773, 599)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/newPrefix/icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.slide_tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.slide_tabWidget.sizePolicy().hasHeightForWidth())
        self.slide_tabWidget.setSizePolicy(sizePolicy)
        self.slide_tabWidget.setObjectName("slide_tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.slide_tabWidget.addTab(self.tab, "")
        self.horizontalLayout.addWidget(self.slide_tabWidget)
        self.roi_list = QtWidgets.QTableWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.roi_list.sizePolicy().hasHeightForWidth())
        self.roi_list.setSizePolicy(sizePolicy)
        self.roi_list.setObjectName("roi_list")
        self.roi_list.setColumnCount(0)
        self.roi_list.setRowCount(0)
        self.horizontalLayout.addWidget(self.roi_list)
        MainWindow.setCentralWidget(self.centralwidget)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toolBar.sizePolicy().hasHeightForWidth())
        self.toolBar.setSizePolicy(sizePolicy)
        self.toolBar.setContextMenuPolicy(QtCore.Qt.PreventContextMenu)
        self.toolBar.setIconSize(QtCore.QSize(48, 48))
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/newPrefix/Folder-icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen.setIcon(icon1)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/newPrefix/Windows_Close_Program_Icon_64.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExit.setIcon(icon2)
        self.actionExit.setObjectName("actionExit")
        self.actionThreshold = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/newPrefix/threshold.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionThreshold.setIcon(icon3)
        self.actionThreshold.setObjectName("actionThreshold")
        self.actionSegment = QtWidgets.QAction(MainWindow)
        self.actionSegment.setIcon(icon)
        self.actionSegment.setObjectName("actionSegment")
        self.actionCrop = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/newPrefix/crop.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCrop.setIcon(icon4)
        self.actionCrop.setObjectName("actionCrop")
        self.actionROI = QtWidgets.QAction(MainWindow)
        self.actionROI.setCheckable(True)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/newPrefix/roi.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionROI.setIcon(icon5)
        self.actionROI.setObjectName("actionROI")
        self.actionBatch = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/newPrefix/batch_crop.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionBatch.setIcon(icon6)
        self.actionBatch.setObjectName("actionBatch")
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionThreshold)
        self.toolBar.addAction(self.actionSegment)
        self.toolBar.addAction(self.actionROI)
        self.toolBar.addAction(self.actionCrop)
        self.toolBar.addAction(self.actionBatch)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionExit)

        self.retranslateUi(MainWindow)
        self.slide_tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SlideCrop"))
        self.slide_tabWidget.setTabText(self.slide_tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionThreshold.setText(_translate("MainWindow", "Threshold"))
        self.actionSegment.setText(_translate("MainWindow", "Segment"))
        self.actionSegment.setToolTip(_translate("MainWindow", "Auto segmention"))
        self.actionCrop.setText(_translate("MainWindow", "Crop"))
        self.actionROI.setText(_translate("MainWindow", "ROI"))
        self.actionROI.setToolTip(_translate("MainWindow", "Manual segmentation"))
        self.actionBatch.setText(_translate("MainWindow", "Batch"))


from .. resources import resources_rc
